
#include <iostream>
#include <string>
#include <cmath>

vdc: (k: u64, base: u64) -> double = {
    res := 0.0;
    denom := 1.0;
    while k != 0 next k /= base {
        remainder := k % base;
        denom *= base;
        res += remainder / denom;
    }
    return res;
}

Vdcorput: type = {
    count: u64 = 0;
    base: u64 = 2;

    operator=: (out this, b: u64) {
        this.base = b;
    }
        
    pop: (inout this) -> double = {
        this.count += 1;
        return vdc(this.count, this.base);
    }

    reseed: (inout this, seed: u64) = {
        this.count = seed;
    }
}

Circle: type = {
    vdc: Vdcorput = 2;

    operator=: (out this, b: u64) {
        this.vdc = b;
    }
        
    pop: (inout this) -> std::array<double, 2> = {
        theta := this.vdc.pop() * 2.0 * 3.1415926;
        return (std::sin(theta), std::cos(theta));
    }

    reseed: (inout this, seed: u64) = {
        this.vdc.reseed(seed);
    }
}

Halton: type = {
    vdc0: Vdcorput = 2;
    vdc1: Vdcorput = 3;

    operator=: (out this, b0: u64, b1: u64) {
        this.vdc0 = b0;
        this.vdc1 = b1;
    }
        
    pop: (inout this) -> std::array<double, 2> = {
        return (this.vdc0.pop(), this.vdc1.pop());
    }

    reseed: (inout this, seed: u64) = {
        this.vdc0.reseed(seed);
        this.vdc1.reseed(seed);
    }
}
